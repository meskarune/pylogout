#!/usr/bin/env python2
"""This program opens a dialog box that enables a user to exit their window
 manager."""

import pygtk
pygtk.require('2.0')
import gtk
import os
import getpass

from config import *

class exit_dialog:
    def disable_buttons(self):
        """Disable Buttons after one is Clicked """
        self.lock.set_sensitive(False)
        self.logout.set_sensitive(False)
        self.suspend.set_sensitive(False)
        self.hibernate.set_sensitive(False)
        self.reboot.set_sensitive(False)
        self.shutdown.set_sensitive(False)
        self.cancel.set_sensitive(False)

    def lock_action(self, btn):
        """Set the command run when the lock button is pressed"""
        self.disable_buttons()
        self.status.set_label("Locking Screen, please standby...")
        os.system(lock_command)
        gtk.main_quit()

    def logout_action(self, btn):
        """Set the commands run when the logout button is pressed"""
        self.disable_buttons()
        self.status.set_label("Exiting, please standby...")
        os.system(close_command)
        os.system(logout_command)

    def suspend_action(self, btn):
        """Set the commands run when the suspend button is pressed"""
        self.disable_buttons()
        self.status.set_label("Suspending, please standby...")
        os.system(lock_command)
        os.system(suspend_command)
        gtk.main_quit()

    def hibernate_action(self, btn):
        """Set the commands run when the hibernate button is pressed"""
        self.disable_buttons()
        self.status.set_label("Hibernating, please standby...")
        os.system(lock_command)
        os.system(hibernate_command)
        gtk.main_quit()

    def reboot_action(self, btn):
        """Set the commands run when the reboot button is pressed"""
        self.disable_buttons()
        self.status.set_label("Rebooting, please standby...")
        os.system(close_command)
        os.system(reboot_command)

    def shutdown_action(self, btn):
        """Set the commands run when the shutdown button is pressed"""
        self.disable_buttons()
        self.status.set_label("Shutting down, please standby...")
        os.system(close_command)
        os.system(shutdown_command)

    def cancel_action(self, btn):
        """Close the program if the cancel button is pressed"""
        self.disable_buttons()
        gtk.main_quit()

    def create_window(self):
        """Create the GUI window and add buttons"""
        self.window = gtk.Window()
        title = "Exit " + getpass.getuser() + "? Choose an option:"
        self.window.set_title(title)
        self.window.set_border_width(5)
        self.window.set_resizable(False)
        self.window.set_keep_above(True)
        self.window.set_position(1)
        self.window.connect("delete_event", gtk.main_quit)
        windowicon = self.window.render_icon(gtk.STOCK_QUIT, gtk.ICON_SIZE_MENU)
        self.window.set_icon(windowicon)
        #icon_theme = gtk.icon_theme_get_default()

        #Create first HBox for buttons
        self.button_box_top = gtk.HBox()
        self.button_box_top.show()

        #Lock button
        #self.lock = icon_theme.load_icon("system-lock-screen", 48, 0)
        self.lock = gtk.Button("_Lock")
        self.lock.set_border_width(2)
        self.lock.connect("clicked", self.lock_action)
        self.button_box_top.pack_start(self.lock)
        self.lock.show()

        #Logout button
        #self.logout = gtk.Button(icon_theme.load_icon("system-log-out", 48, 0))
        #self.logout = gtk.Button(stock = gtk.STOCK_QUIT)
        self.logout = gtk.Button("_Log out")
        self.logout.set_border_width(2)
        self.logout.connect("clicked", self.logout_action)
        self.button_box_top.pack_start(self.logout)
        self.logout.show()

        #Suspend button
        #self.suspend = icon_theme.load_icon("system-suspend", 48, 0)
        self.suspend = gtk.Button("_Suspend")
        self.suspend.set_border_width(2)
        self.suspend.connect("clicked", self.suspend_action)
        self.button_box_top.pack_start(self.suspend)
        self.suspend.show()

        #Create second HBox for buttons
        self.button_box_bottom = gtk.HBox()
        self.button_box_bottom.show()

        # Hibernate button
        #self.hibernate = icon_theme.load_icon("system-hibernate", 48, 0)
        self.hibernate = gtk.Button("_Hibernate")
        self.hibernate.set_border_width(2)
        self.hibernate.connect("clicked", self.hibernate_action)
        self.button_box_bottom.pack_start(self.hibernate)
        self.hibernate.show()

        #Reboot button
        #self.hibernate = icon_theme.load_icon("system-restart", 48, 0)
        self.reboot = gtk.Button("_Reboot")
        self.reboot.set_border_width(2)
        self.reboot.connect("clicked", self.reboot_action)
        self.button_box_bottom.pack_start(self.reboot)
        self.reboot.show()

        #Shutdown button
        #self.shutdown = gtk.Button(icon_theme.load_icon("system-shutdown", 48, 0))
        self.shutdown = gtk.Button("_Power off")
        self.shutdown.set_border_width(2)
        self.shutdown.connect("clicked", self.shutdown_action)
        self.button_box_bottom.pack_start(self.shutdown)
        self.shutdown.show()

        #Create HBox for Cancle Button
        self.cancel_box = gtk.HBox()
        self.cancel_box.show()

        #Cancel button
        self.cancel = gtk.Button(stock=gtk.STOCK_CANCEL)
        self.cancel.set_border_width(2)
        self.cancel.connect("clicked", self.cancel_action)
        self.cancel_box.pack_start(self.cancel)
        self.cancel.show()

        #Create HBox for status label
        self.label_box = gtk.HBox()
        self.label_box.show()
        self.status = gtk.Label()
        self.status.show()
        self.label_box.pack_start(self.status)

        #Create VBox and pack the above HBox's
        self.vbox = gtk.VBox()
        self.vbox.pack_start(self.button_box_top)
        self.vbox.pack_start(self.button_box_bottom)
        self.vbox.pack_start(self.cancel_box)
        self.vbox.pack_start(self.label_box)
        self.vbox.show()

        self.window.add(self.vbox)
        self.window.show()
        settings = gtk.settings_get_default()
        settings.props.gtk_button_images = True

    def __init__(self):
        self.create_window()


def main():
    """Create GTK application """
    gtk.main()

if __name__ == "__main__":
    exit_dialog()
    main()
